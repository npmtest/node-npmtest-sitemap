{"/home/travis/build/npmtest/node-npmtest-sitemap/test.js":"/* istanbul instrument in package npmtest_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sitemap/lib.npmtest_sitemap.js":"/* istanbul instrument in package npmtest_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sitemap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sitemap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sitemap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sitemap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sitemap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sitemap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sitemap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sitemap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sitemap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sitemap.__dirname + '/lib.npmtest_sitemap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sitemap/node_modules/sitemap/index.js":"/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\nmodule.exports = require('./lib/sitemap');\nmodule.exports.utils = require('./lib/utils');\nmodule.exports.errors = require('./lib/errors');\n\n/**\n * Framework version.\n */\nvar fs = require('fs');\n\nif (!module.exports.version) {\n  module.exports.version = JSON.parse(\n    fs.readFileSync(__dirname + \"/package.json\", 'utf8')).version;\n}\n","/home/travis/build/npmtest/node-npmtest-sitemap/node_modules/sitemap/lib/sitemap.js":"/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\nvar ut = require('./utils')\n  , err = require('./errors')\n  , urlparser = require('url')\n  , fs = require('fs')\n  , urljoin = require('url-join')\n  , _ = require('underscore');\n\nexports.Sitemap = Sitemap;\nexports.SitemapItem = SitemapItem;\nexports.createSitemap = createSitemap;\nexports.createSitemapIndex = createSitemapIndex;\nexports.buildSitemapIndex = buildSitemapIndex;\n\n/**\n * Shortcut for `new Sitemap (...)`.\n *\n * @param   {Object}        conf\n * @param   {String}        conf.hostname\n * @param   {String|Array}  conf.urls\n * @param   {Number}        conf.cacheTime\n * @param   {String}        conf.xslUrl\n * @param   {String}        conf.xmlNs\n * @return  {Sitemap}\n */\nfunction createSitemap(conf) {\n  return new Sitemap(conf.urls, conf.hostname, conf.cacheTime, conf.xslUrl, conf.xmlNs);\n}\n\nfunction safeUrl(conf) {\n  var loc = conf['url'];\n  if (!conf['safe']) {\n    var url_parts = urlparser.parse(conf['url']);\n    if (!url_parts['protocol']) {\n      throw new err.NoURLProtocolError();\n    }\n\n    loc = ut.htmlEscape(conf['url']);\n  }\n  return loc;\n}\n\n/**\n * Item in sitemap\n */\nfunction SitemapItem(conf) {\n  var conf = conf || {}\n    , is_safe_url = conf['safe'];\n\n  if (!conf['url']) {\n    throw new err.NoURLError();\n  }\n\n  // URL of the page\n  if(!conf.cdata) {\n    this.loc = safeUrl(conf);\n  } else {\n    this.loc = conf.url;\n  }\n\n  // If given a file to use for last modified date\n  if (conf['lastmodfile']) {\n    //console.log('should read stat from file: ' + conf['lastmodfile']);\n    var file = conf['lastmodfile'];\n\n    var stat = fs.statSync(file);\n\n    var mtime = stat.mtime;\n\n    var dt = new Date(mtime);\n    this.lastmod = ut.getTimestampFromDate(dt, conf['lastmodrealtime']);\n\n  }\n  // The date of last modification (YYYY-MM-DD)\n  else if (conf['lastmod']) {\n    // append the timezone offset so that dates are treated as local time.\n    // Otherwise the Unit tests fail sometimes.\n    var timezoneOffset = 'UTC-' + (new Date().getTimezoneOffset() / 60) + '00';\n    timezoneOffset = timezoneOffset.replace('--', '-');\n    var dt = new Date(conf['lastmod'] + ' ' + timezoneOffset);\n    this.lastmod = ut.getTimestampFromDate(dt, conf['lastmodrealtime']);\n  } else if (conf['lastmodISO']) {\n    this.lastmod = conf['lastmodISO'];\n  }\n\n  // How frequently the page is likely to change\n  // due to this field is optional no default value is set\n  // please see: http://www.sitemaps.org/protocol.html\n  this.changefreq = conf['changefreq'];\n  if (!is_safe_url && this.changefreq) {\n    if (['always', 'hourly', 'daily', 'weekly', 'monthly',\n        'yearly', 'never'].indexOf(this.changefreq) === -1) {\n      throw new err.ChangeFreqInvalidError();\n    }\n  }\n\n  // The priority of this URL relative to other URLs\n  // due to this field is optional no default value is set\n  // please see: http://www.sitemaps.org/protocol.html\n  this.priority = conf['priority'];\n  if (!is_safe_url && this.priority) {\n    if (!(this.priority >= 0.0 && this.priority <= 1.0) || typeof this.priority !== 'number') {\n      throw new err.PriorityInvalidError();\n    }\n  }\n\n  this.news = conf['news'] || null;\n  this.img = conf['img'] || null;\n  this.links = conf['links'] || null;\n  this.expires = conf['expires'] || null;\n  this.androidLink = conf['androidLink'] || null;\n  this.mobile = conf['mobile'] || null;\n  this.video = conf['video'] || null;\n  this.ampLink = conf['ampLink'] || null;\n}\n\n/**\n *  Create sitemap xml\n *  @return {String}\n */\nSitemapItem.prototype.toXML = function () {\n  return this.toString();\n};\n\n/**\n *  Alias for toXML()\n *  @return {String}\n */\nSitemapItem.prototype.toString = function () {\n  // result xml\n  var xml = '<url> {loc} {img} {video} {lastmod} {changefreq} {priority} {links} {expires} {androidLink} {mobile} {news} {ampLink}</url>'\n  // xml property\n    , props = ['loc', 'img', 'video', 'lastmod', 'changefreq', 'priority', 'links', 'expires', 'androidLink', 'mobile', 'news', 'ampLink']\n  // property array size (for loop)\n    , ps = props.length\n  // current property name (for loop)\n    , p;\n\n  while (ps--) {\n    p = props[ps];\n\n    if (this[p] && p == 'img') {\n      var imagexml = '';\n      // Image handling\n      if (typeof(this[p]) != 'object' || this[p].length == undefined) {\n        // make it an array\n        this[p] = [this[p]];\n      }\n      this[p].forEach(function (image) {\n        if(typeof(image) != 'object') {\n          // it’s a string\n          // make it an object\n          image = {url: image};\n        }\n        var caption = image.caption ? '<image:caption><![CDATA['+image.caption+']]></image:caption>' : '';\n        var geoLocation = image.geoLocation ? '<image:geo_location>'+image.geoLocation+'</image:geo_location>' : '';\n        var title = image.title ? '<image:title><![CDATA['+image.title+']]></image:title>' : '';\n        var license = image.license ? '<image:license>'+image.license+'</image:license>' : '';\n\n        imagexml += '<image:image><image:loc>' + image.url + '</image:loc>' + caption + geoLocation + title + license + '</image:image> ';\n      });\n\n      xml = xml.replace('{' + p + '}', imagexml);\n\n    } else if (this[p] && p == 'video') {\n      var videoxml = '';\n      // Image handling\n      if (typeof(this[p]) != 'object' || this[p].length == undefined) {\n        // make it an array\n        this[p] = [this[p]];\n      }\n      this[p].forEach(function (video) {\n        if(typeof(video) != 'object' || !video.thumbnail_loc || !video.title || !video.description) {\n          // has to be an object and include required categories https://developers.google.com/webmasters/videosearch/sitemaps\n          throw new err.InvalidVideoFormat();\n        }\n        videoxml += '<video:video>' +\n          '<video:thumbnail_loc>' + video.thumbnail_loc + '</video:thumbnail_loc>' +\n          '<video:title><![CDATA[' + video.title + ']]></video:title>' +\n          '<video:description><![CDATA[' + video.description + ']]></video:description>';\n        if (video.content_loc)\n          videoxml += '<video:content_loc>' + video.content_loc + '</video:content_loc>';\n        if (video.player_loc)\n          videoxml += '<video:player_loc>' + video.player_loc + '</video:player_loc>';\n        if (video.duration)\n          videoxml += '<video:duration>' + video.duration + '</video:duration>';\n        if (video.expiration_date)\n          videoxml += '<video:expiration_date>' + video.expiration_date + '</video:expiration_date>';\n        if (video.rating)\n          videoxml += '<video:rating>' + video.rating + '</video:rating>';\n        if (video.view_count)\n          videoxml += '<video:view_count>' + video.view_count + '</video:view_count>';\n        if (video.publication_date)\n          videoxml += '<video:publication_date>' + video.publication_date + '</video:publication_date>';\n        if (video.family_friendly)\n          videoxml += '<video:family_friendly>' + video.family_friendly + '</video:family_friendly>';\n        if (video.tag)\n          videoxml += '<video:tag>' + video.tag + '</video:tag>';\n        if (video.category)\n          videoxml += '<video:category>' + video.category + '</video:category>';\n        if (video.restriction)\n          videoxml += '<video:restriction>' + video.restriction + '</video:restriction>';\n        if (video.gallery_loc)\n          videoxml += '<video:gallery_loc>' + video.gallery_loc + '</video:gallery_loc>';\n        if (video.price)\n          videoxml += '<video:price>' + video.price + '</video:price>';\n        if (video.requires_subscription)\n          videoxml += '<video:requires_subscription>' + video.requires_subscription + '</video:requires_subscription>';\n        if (video.uploader)\n          videoxml += '<video:uploader>' + video.uploader + '</video:uploader>';\n        if (video.platform)\n          videoxml += '<video:platform>' + video.platform + '</video:platform>';\n        if (video.live)\n          videoxml += '<video:live>' + video.live + '</video:live>';\n        videoxml += '</video:video>'\n      });\n\n      xml = xml.replace('{' + p + '}', videoxml);\n\n    } else if (this[p] && p == 'links') {\n      xml = xml.replace('{' + p + '}',\n        this[p].map(function (link) {\n          return '<xhtml:link rel=\"alternate\" hreflang=\"' + link.lang + '\" href=\"' + safeUrl(link) + '\" />';\n        }).join(\" \"));\n    } else if (this[p] && p === 'expires') {\n      xml = xml.replace('{' + p + '}', '<' + p + '>' + new Date(this[p]).toISOString() + '</' + p + '>');\n    } else if (this[p] && p == 'androidLink') {\n      xml = xml.replace('{' + p + '}', '<xhtml:link rel=\"alternate\" href=\"' + this[p] + '\" />');\n    } else if (this[p] && p == 'mobile') {\n      xml = xml.replace('{' + p + '}', '<mobile:mobile/>');\n    } else if (p == 'priority' && (this[p] >= 0.0 && this[p] <= 1.0)) {\n      xml = xml.replace('{' + p + '}',\n        '<' + p + '>' + parseFloat(this[p]).toFixed(1) + '</' + p + '>');\n    } else if (this[p] && p == 'ampLink') {\n      xml = xml.replace('{' + p + '}',\n        '<xhtml:link rel=\"amphtml\" href=\"' + this[p] + '\" />');\n    } else if (this[p] && p == 'news') {\n      var newsitem = '<news:news>';\n\n      if (this[p].publication) {\n        newsitem += '<news:publication>';\n        if (this[p].publication.name) {\n          newsitem += '<news:name>' + this[p].publication.name + '</news:name>';\n        }\n        if (this[p].publication.language) {\n          newsitem += '<news:language>' + this[p].publication.language + '</news:language>';\n        }\n        newsitem += '</news:publication>';\n      }\n\n      if (this[p].access) {\n        newsitem += '<news:access>' + this[p].access + '</news:access>';\n      }\n      if (this[p].genres) {\n        newsitem += '<news:genres>' + this[p].genres + '</news:genres>';\n      }\n      if (this[p].publication_date) {\n        newsitem += '<news:publication_date>' + this[p].publication_date + '</news:publication_date>';\n      }\n      if (this[p].title) {\n        newsitem += '<news:title>' + this[p].title + '</news:title>';\n      }\n      if (this[p].keywords) {\n        newsitem += '<news:keywords>' + this[p].keywords + '</news:keywords>';\n      }\n      if (this[p].stock_tickers) {\n        newsitem += '<news:stock_tickers>' + this[p].stock_tickers + '</news:stock_tickers>';\n      }\n\n      newsitem += '</news:news>';\n\n      xml = xml.replace('{' + p + '}', newsitem);\n    } else if (this[p]) {\n      xml = xml.replace('{' + p + '}',\n        '<' + p + '>' + this[p] + '</' + p + '>');\n    } else {\n      xml = xml.replace('{' + p + '}', '');\n    }\n    xml = xml.replace('  ', ' ');\n  }\n\n  return xml.replace('  ', ' ');\n};\n\n/**\n * Sitemap constructor\n * @param {String|Array}  urls\n * @param {String}        hostname    optional\n * @param {Number}        cacheTime   optional in milliseconds; 0 - cache disabled\n * @param {String}        xslUrl            optional\n * @param {String}        xmlNs            optional\n */\nfunction Sitemap(urls, hostname, cacheTime, xslUrl, xmlNs) {\n\n  // This limit is defined by Google. See:\n  // http://sitemaps.org/protocol.php#index\n  this.limit = 50000\n\n  // Base domain\n  this.hostname = hostname;\n\n  // URL list for sitemap\n  this.urls = [];\n\n  // Make copy of object\n  if (urls) _.extend(this.urls, (urls instanceof Array) ? urls : [urls]);\n\n  // sitemap cache\n  this.cacheResetPeriod = cacheTime || 0;\n  this.cache = '';\n\n  this.xslUrl = xslUrl;\n  this.xmlNs = xmlNs;\n}\n\n/**\n *  Clear sitemap cache\n */\nSitemap.prototype.clearCache = function () {\n  this.cache = '';\n};\n\n/**\n *  Can cache be used\n */\nSitemap.prototype.isCacheValid = function () {\n  var currTimestamp = ut.getTimestamp();\n  return this.cacheResetPeriod && this.cache &&\n    (this.cacheSetTimestamp + this.cacheResetPeriod) >= currTimestamp;\n};\n\n/**\n *  Fill cache\n */\nSitemap.prototype.setCache = function (newCache) {\n  this.cache = newCache;\n  this.cacheSetTimestamp = ut.getTimestamp();\n  return this.cache;\n};\n\n/**\n *  Add url to sitemap\n *  @param {String} url\n */\nSitemap.prototype.add = function (url) {\n  return this.urls.push(url);\n};\n\n/**\n *  Delete url from sitemap\n *  @param {String} url\n */\nSitemap.prototype.del = function (url) {\n  var index_to_remove = [],\n    key = '',\n    self = this;\n\n  if (typeof url == 'string') {\n    key = url;\n  } else {\n    key = url['url'];\n  }\n\n  // find\n  this.urls.forEach(function (elem, index) {\n    if (typeof elem == 'string') {\n      if (elem == key) {\n        index_to_remove.push(index);\n      }\n    } else {\n      if (elem['url'] == key) {\n        index_to_remove.push(index);\n      }\n    }\n  });\n\n  // delete\n  index_to_remove.forEach(function (elem) {\n    self.urls.splice(elem, 1);\n  });\n\n  return index_to_remove.length;\n};\n\n/**\n *  Create sitemap xml\n *  @param {Function}     callback  Callback function with one argument — xml\n */\nSitemap.prototype.toXML = function (callback) {\n  if (typeof callback === 'undefined') {\n    return this.toString();\n  }\n  var self = this;\n  process.nextTick(function () {\n    try {\n      return callback(null, self.toString());\n    } catch (err) {\n      return callback(err);\n    }\n  });\n};\n\nvar reProto = /^https?:\\/\\//i;\n\n/**\n *  Synchronous alias for toXML()\n *  @return {String}\n */\nSitemap.prototype.toString = function () {\n  var self = this, xml;\n  if(!self.xmlNs) {\n      xml = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ' +\n      'xmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\" ' +\n      'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\" ' +\n      'xmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\" ' +\n      'xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\" ' +\n      'xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\">'\n    ];\n  } else {\n    xml = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<urlset '+ this.xmlNs + '>']\n  }\n\n  if (self.xslUrl) {\n    xml.splice(1, 0,\n      '<?xml-stylesheet type=\"text/xsl\" href=\"' + self.xslUrl + '\"?>');\n  }\n\n  if (self.isCacheValid()) {\n    return self.cache;\n  }\n\n  // TODO: if size > limit: create sitemapindex\n\n  self.urls.forEach(function (elem, index) {\n    // SitemapItem\n    var smi = elem;\n\n    // create object with url property\n    if (typeof elem == 'string') {\n      smi = {'url': elem};\n    }\n    // insert domain name\n    if (self.hostname) {\n      if (!reProto.test(smi.url)) {\n        smi.url = urljoin(self.hostname, smi.url);\n      }\n      if (smi.img) {\n        if (typeof smi.img == 'string') {\n          // string -> array of objects\n          smi.img = [{url: smi.img}];\n        }\n        if (typeof smi.img == 'object' && smi.img.length == undefined) {\n          // object -> array of objects\n          smi.img = [smi.img];\n        }\n        // prepend hostname to all image urls\n        smi.img.forEach(function (img) {\n          if (!reProto.test(img.url)) {\n            img.url = urljoin(self.hostname, img.url);\n          }\n        });\n      }\n      if (smi.links) {\n        smi.links.forEach(function (link) {\n          if (!reProto.test(link.url)) {\n            link.url = urljoin(self.hostname, link.url);\n          }\n        });\n      }\n    }\n    xml.push(new SitemapItem(smi));\n  });\n  // close xml\n  xml.push('</urlset>');\n\n  return self.setCache(xml.join('\\n'));\n};\n\nSitemap.prototype.toGzip = function (callback) {\n  var zlib = require('zlib');\n\n  if (typeof callback === 'function') {\n    zlib.gzip(this.toString(), callback);\n  } else {\n    return zlib.gzipSync(this.toString());\n  }\n};\n\n/**\n * Shortcut for `new SitemapIndex (...)`.\n *\n * @param   {Object}        conf\n * @param   {String|Array}  conf.urls\n * @param   {String}        conf.targetFolder\n * @param   {String}        conf.hostname\n * @param   {Number}        conf.cacheTime\n * @param   {String}        conf.sitemapName\n * @param   {Number}        conf.sitemapSize\n * @param   {String}        conf.xslUrl\n * @return  {SitemapIndex}\n */\nfunction createSitemapIndex(conf) {\n  return new SitemapIndex(conf.urls,\n    conf.targetFolder,\n    conf.hostname,\n    conf.cacheTime,\n    conf.sitemapName,\n    conf.sitemapSize,\n    conf.xslUrl,\n    conf.gzip,\n    conf.callback);\n}\n\n/**\n * Builds a sitemap index from urls\n *\n * @param   {Object}    conf\n * @param   {Array}     conf.urls\n * @param   {String}    conf.xslUrl\n * @param   {String}    conf.xmlNs\n * @return  {String}    XML String of SitemapIndex\n */\nfunction buildSitemapIndex(conf) {\n  var xml = [];\n\n  xml.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\n  if (conf.xslUrl) {\n    xml.push('<?xml-stylesheet type=\"text/xsl\" href=\"' + conf.xslUrl + '\"?>');\n  }\n  if(!conf.xmlNs) {\n    xml.push('<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" ' +\n      'xmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\" ' +\n      'xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\" ' +\n      'xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\">');\n  } else {\n    xml.push('<sitemapindex ' + conf.xmlNs + '>')\n  }\n\n\n  conf.urls.forEach(function (url) {\n    xml.push('<sitemap>');\n    xml.push('<loc>' + url + '</loc>');\n    xml.push('</sitemap>');\n  });\n\n  xml.push('</sitemapindex>');\n\n  return xml.join('\\n');\n}\n\n/**\n * Sitemap index (for several sitemaps)\n * @param {String|Array}  urls\n * @param {String}        targetFolder\n * @param {String}        hostname      optional\n * @param {Number}        cacheTime     optional in milliseconds\n * @param {String}        sitemapName   optional\n * @param {Number}        sitemapSize   optional\n * @param {Number}        xslUrl                optional\n * @param {Boolean}       gzip          optional\n * @param {Function}      callback      optional\n */\nfunction SitemapIndex(urls, targetFolder, hostname, cacheTime, sitemapName, sitemapSize, xslUrl, gzip, callback) {\n\n  var self = this;\n\n  self.fs = require('fs');\n\n  // Base domain\n  self.hostname = hostname;\n\n  if (sitemapName === undefined) {\n    self.sitemapName = 'sitemap';\n  }\n  else {\n    self.sitemapName = sitemapName;\n  }\n\n  // This limit is defined by Google. See:\n  // http://sitemaps.org/protocol.php#index\n  self.sitemapSize = sitemapSize;\n\n  self.xslUrl = xslUrl;\n\n  self.sitemapId = 0;\n\n  self.sitemaps = [];\n\n  self.targetFolder = '.';\n\n  try {\n    if (!self.fs.statSync(targetFolder).isDirectory()) {\n      throw new err.UndefinedTargetFolder();\n    }\n  } catch (err) {\n    throw new err.UndefinedTargetFolder();\n  }\n\n  self.targetFolder = targetFolder;\n\n  // URL list for sitemap\n  self.urls = urls || [];\n  if (!(self.urls instanceof Array)) {\n    self.urls = [self.urls]\n  }\n\n  self.chunks = ut.chunkArray(self.urls, self.sitemapSize);\n\n  self.callback = callback;\n\n  var processesCount = self.chunks.length + 1;\n\n  self.chunks.forEach(function (chunk, index) {\n    var extension = '.xml' + (gzip ? '.gz' : ''),\n      filename = self.sitemapName + '-' + self.sitemapId++ + extension;\n\n    self.sitemaps.push(filename);\n\n    var sitemap = createSitemap({\n      hostname: self.hostname,\n      cacheTime: self.cacheTime, // 600 sec - cache purge period\n      urls: chunk,\n      xslUrl: self.xslUrl\n    });\n\n    var stream = self.fs.createWriteStream(targetFolder + '/' + filename);\n    stream.once('open', function (fd) {\n      stream.write(gzip ? sitemap.toGzip() : sitemap.toString());\n      stream.end();\n      processesCount--;\n      if (processesCount === 0 && typeof self.callback === 'function') {\n        self.callback(null, true);\n      }\n    });\n\n  });\n\n  var sitemapUrls = self.sitemaps.map(function(sitemap, index){\n    return hostname + '/' + sitemap;\n  });\n  var smConf = {urls: sitemapUrls, xslUrl: self.xslUrl, xmlNs: self.xmlNs};\n  var xmlString = buildSitemapIndex(smConf);\n\n  var stream = self.fs.createWriteStream(targetFolder + '/' +\n    self.sitemapName + '-index.xml');\n  stream.once('open', function (fd) {\n    stream.write(xmlString);\n    stream.end();\n    processesCount--;\n    if (processesCount === 0 && typeof self.callback === 'function') {\n      self.callback(null, true);\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-sitemap/node_modules/sitemap/lib/utils.js":"/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\nvar _ = require('underscore');\n\n/**\n * Exit with the given `str`.\n *\n * @param {String} str\n */\nexports.abort = function (str) {\n  console.error(str);\n  process.exit(1);\n};\n\n/**\n * Escapes special characters in text.\n *\n * @param {String} text\n */\nexports.htmlEscape = function (text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n};\n\n/**\n *  Pads the left-side of a string with a specific\n *  set of characters.\n *\n *  @param {Object} n\n *  @param {Number} len\n *  @param {String} chr\n */\nexports.lpad = function (n, len, chr) {\n  var res = n.toString()\n    , chr = chr || '0'\n    , leading = (res.substr(0, 1) === '-');\n\n  //If left side of string is a minus sign (negative number), we want to ignore that in the padding process\n  if (leading) {\n    res = res.substr(1); //cut-off the leading '-'\n  }\n\n  while (res.length < len) {\n    res = chr + res;\n  }\n\n  if (leading) { //If we initially cutoff the leading '-', we add it again here\n    res = '-' + res;\n  }\n\n  return res;\n};\n\n/**\n *\n * @param {Array} arr\n */\nexports.distinctArray = function (arr) {\n  var hash = {}\n    , res = []\n    , arr_length = arr.length;\n  while (arr_length--) {\n    hash[arr[arr_length]] = true;\n  }\n  for (key in hash) {\n    res.push(key);\n  }\n  return res;\n};\n\nexports.chunkArray = function (arr, chunkSize) {\n  var lists = _.groupBy(arr, function (element, index) {\n    return Math.floor(index / chunkSize);\n  });\n  lists = _.toArray(lists);\n  return lists;\n};\n\nexports.getTimestamp = function () {\n  return (new Date()).getTime();\n};\n\nexports.getTimestampFromDate = function (dt, bRealtime) {\n  var timestamp = [dt.getUTCFullYear(), exports.lpad(dt.getUTCMonth() + 1, 2),\n    exports.lpad(dt.getUTCDate(), 2)].join('-');\n\n  // Indicate that lastmod should include minutes and seconds (and timezone)\n  if (bRealtime && bRealtime === true) {\n    timestamp += 'T';\n    timestamp += [exports.lpad(dt.getUTCHours(), 2),\n      exports.lpad(dt.getUTCMinutes(), 2),\n      exports.lpad(dt.getUTCSeconds(), 2)\n    ].join(':');\n    timestamp += 'Z';\n  }\n\n  return timestamp;\n};\n","/home/travis/build/npmtest/node-npmtest-sitemap/node_modules/sitemap/lib/errors.js":"/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\n/**\n * URL in SitemapItem does not exists\n */\nexports.NoURLError = function (message) {\n  this.name = 'NoURLError';\n  this.message = message || 'URL is required';\n};\nexports.NoURLError.prototype = Error.prototype;\n\n/**\n * Protocol in URL does not exists\n */\nexports.NoURLProtocolError = function (message) {\n  this.name = 'NoURLProtocolError';\n  this.message = message || 'Protocol is required';\n};\nexports.NoURLProtocolError.prototype = Error.prototype;\n\n/**\n * changefreq property in sitemap is invalid\n */\nexports.ChangeFreqInvalidError = function (message) {\n  this.name = 'ChangeFreqInvalidError';\n  this.message = message || 'changefreq is invalid';\n};\nexports.ChangeFreqInvalidError.prototype = Error.prototype;\n\n/**\n * priority property in sitemap is invalid\n */\nexports.PriorityInvalidError = function (message) {\n  this.name = 'PriorityInvalidError';\n  this.message = message || 'priority is invalid';\n};\nexports.PriorityInvalidError.prototype = Error.prototype;\n\n/**\n * SitemapIndex target Folder does not exists\n */\nexports.UndefinedTargetFolder = function (message) {\n  this.name = 'UndefinedTargetFolder';\n  this.message = message || 'Target folder must exist';\n};\n\nexports.InvalidVideoFormat = function (message) {\n  this.name = 'InvalidVideoFormat';\n  this.message = message || 'must include thumbnail_loc, title and description fields for videos ';\n};\n\nexports.UndefinedTargetFolder.prototype = Error.prototype;\n","/home/travis/build/npmtest/node-npmtest-sitemap/node_modules/sitemap/testing.js":"var options = {\n    hostname: 'http://test.com',\n    cacheTime: 600000, // 600 sec - cache purge period\n    urls: [{\n            url: 'http://test.com/page-1/',\n            changefreq: 'weekly',\n            priority: 0.3,\n            links: [\n                { lang: 'en', url: 'http://test.com/page-1/', },\n                { lang: 'ja', url: 'http://test.com/page-1/ja/', },\n            ]\n    },]\n};\nvar sm = require('sitemap');\nvar sitemap = sm.createSitemap(options);\nconsole.log(sitemap.toString());\n"}